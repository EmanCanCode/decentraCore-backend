/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "activateSale()": FunctionFragment;
    "appraiser()": FunctionFragment;
    "approval(address)": FunctionFragment;
    "approveSale()": FunctionFragment;
    "buyer()": FunctionFragment;
    "cancelSale()": FunctionFragment;
    "deposit()": FunctionFragment;
    "depositEarnest()": FunctionFragment;
    "deposit_balance(address)": FunctionFragment;
    "earnest_amount()": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "finalizeSale()": FunctionFragment;
    "finance_contract()": FunctionFragment;
    "inspector()": FunctionFragment;
    "lender()": FunctionFragment;
    "nft_address()": FunctionFragment;
    "nft_count()": FunctionFragment;
    "nft_id()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "purchase_price()": FunctionFragment;
    "seller()": FunctionFragment;
    "setFinanceContract(address)": FunctionFragment;
    "state()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateSale"
      | "appraiser"
      | "approval"
      | "approveSale"
      | "buyer"
      | "cancelSale"
      | "deposit"
      | "depositEarnest"
      | "deposit_balance"
      | "earnest_amount"
      | "factory"
      | "fee"
      | "finalizeSale"
      | "finance_contract"
      | "inspector"
      | "lender"
      | "nft_address"
      | "nft_count"
      | "nft_id"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "purchase_price"
      | "seller"
      | "setFinanceContract"
      | "state"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateSale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appraiser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approval",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositEarnest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_balance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "earnest_amount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finance_contract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nft_address",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft_count", values?: undefined): string;
  encodeFunctionData(functionFragment: "nft_id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase_price",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFinanceContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appraiser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositEarnest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnest_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finance_contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nft_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft_count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft_id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchase_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFinanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "ActivatedSale(address)": EventFragment;
    "Approval(address)": EventFragment;
    "Cancelled(address)": EventFragment;
    "Completed(address,address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "SetFinanceContract(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivatedSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFinanceContract"): EventFragment;
}

export interface ActivatedSaleEventObject {
  _from: string;
}
export type ActivatedSaleEvent = TypedEvent<[string], ActivatedSaleEventObject>;

export type ActivatedSaleEventFilter = TypedEventFilter<ActivatedSaleEvent>;

export interface ApprovalEventObject {
  _from: string;
}
export type ApprovalEvent = TypedEvent<[string], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CancelledEventObject {
  _from: string;
}
export type CancelledEvent = TypedEvent<[string], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface CompletedEventObject {
  _from: string;
  _new_nft_owner: string;
}
export type CompletedEvent = TypedEvent<[string, string], CompletedEventObject>;

export type CompletedEventFilter = TypedEventFilter<CompletedEvent>;

export interface DepositEventObject {
  _from: string;
  _value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface SetFinanceContractEventObject {
  finance_contract: string;
}
export type SetFinanceContractEvent = TypedEvent<
  [string],
  SetFinanceContractEventObject
>;

export type SetFinanceContractEventFilter =
  TypedEventFilter<SetFinanceContractEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    appraiser(overrides?: CallOverrides): Promise<[string]>;

    approval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approveSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyer(overrides?: CallOverrides): Promise<[string]>;

    cancelSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEarnest(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit_balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    earnest_amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[number]>;

    finalizeSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finance_contract(overrides?: CallOverrides): Promise<[string]>;

    inspector(overrides?: CallOverrides): Promise<[string]>;

    lender(overrides?: CallOverrides): Promise<[string]>;

    nft_address(overrides?: CallOverrides): Promise<[string]>;

    nft_count(overrides?: CallOverrides): Promise<[number]>;

    nft_id(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchase_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    seller(overrides?: CallOverrides): Promise<[string]>;

    setFinanceContract(
      _finance_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  activateSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  appraiser(overrides?: CallOverrides): Promise<string>;

  approval(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approveSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyer(overrides?: CallOverrides): Promise<string>;

  cancelSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEarnest(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit_balance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earnest_amount(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<number>;

  finalizeSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finance_contract(overrides?: CallOverrides): Promise<string>;

  inspector(overrides?: CallOverrides): Promise<string>;

  lender(overrides?: CallOverrides): Promise<string>;

  nft_address(overrides?: CallOverrides): Promise<string>;

  nft_count(overrides?: CallOverrides): Promise<number>;

  nft_id(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchase_price(overrides?: CallOverrides): Promise<BigNumber>;

  seller(overrides?: CallOverrides): Promise<string>;

  setFinanceContract(
    _finance_contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    activateSale(overrides?: CallOverrides): Promise<void>;

    appraiser(overrides?: CallOverrides): Promise<string>;

    approval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveSale(overrides?: CallOverrides): Promise<void>;

    buyer(overrides?: CallOverrides): Promise<string>;

    cancelSale(overrides?: CallOverrides): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    depositEarnest(overrides?: CallOverrides): Promise<void>;

    deposit_balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnest_amount(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<number>;

    finalizeSale(overrides?: CallOverrides): Promise<void>;

    finance_contract(overrides?: CallOverrides): Promise<string>;

    inspector(overrides?: CallOverrides): Promise<string>;

    lender(overrides?: CallOverrides): Promise<string>;

    nft_address(overrides?: CallOverrides): Promise<string>;

    nft_count(overrides?: CallOverrides): Promise<number>;

    nft_id(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    purchase_price(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<string>;

    setFinanceContract(
      _finance_contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ActivatedSale(address)"(
      _from?: PromiseOrValue<string> | null
    ): ActivatedSaleEventFilter;
    ActivatedSale(
      _from?: PromiseOrValue<string> | null
    ): ActivatedSaleEventFilter;

    "Approval(address)"(
      _from?: PromiseOrValue<string> | null
    ): ApprovalEventFilter;
    Approval(_from?: PromiseOrValue<string> | null): ApprovalEventFilter;

    "Cancelled(address)"(
      _from?: PromiseOrValue<string> | null
    ): CancelledEventFilter;
    Cancelled(_from?: PromiseOrValue<string> | null): CancelledEventFilter;

    "Completed(address,address)"(
      _from?: PromiseOrValue<string> | null,
      _new_nft_owner?: PromiseOrValue<string> | null
    ): CompletedEventFilter;
    Completed(
      _from?: PromiseOrValue<string> | null,
      _new_nft_owner?: PromiseOrValue<string> | null
    ): CompletedEventFilter;

    "Deposit(address,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): DepositEventFilter;
    Deposit(
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): DepositEventFilter;

    "SetFinanceContract(address)"(
      finance_contract?: PromiseOrValue<string> | null
    ): SetFinanceContractEventFilter;
    SetFinanceContract(
      finance_contract?: PromiseOrValue<string> | null
    ): SetFinanceContractEventFilter;
  };

  estimateGas: {
    activateSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    appraiser(overrides?: CallOverrides): Promise<BigNumber>;

    approval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEarnest(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit_balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earnest_amount(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finance_contract(overrides?: CallOverrides): Promise<BigNumber>;

    inspector(overrides?: CallOverrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    nft_address(overrides?: CallOverrides): Promise<BigNumber>;

    nft_count(overrides?: CallOverrides): Promise<BigNumber>;

    nft_id(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchase_price(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<BigNumber>;

    setFinanceContract(
      _finance_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    appraiser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approval(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEarnest(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit_balance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnest_amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finance_contract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchase_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFinanceContract(
      _finance_contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
