/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AutomatedProcessInterface extends utils.Interface {
  functions: {
    "inventoryManagement()": FunctionFragment;
    "owner()": FunctionFragment;
    "processValues(address,uint256)": FunctionFragment;
    "provenance()": FunctionFragment;
    "releaseProcessValue(uint32,address)": FunctionFragment;
    "setInventoryManagement(address)": FunctionFragment;
    "setProcessValue(uint256,address)": FunctionFragment;
    "setProvenance(address)": FunctionFragment;
    "updateStock(uint256,uint256,uint8,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "inventoryManagement"
      | "owner"
      | "processValues"
      | "provenance"
      | "releaseProcessValue"
      | "setInventoryManagement"
      | "setProcessValue"
      | "setProvenance"
      | "updateStock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "inventoryManagement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processValues",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "provenance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseProcessValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInventoryManagement",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvenance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "inventoryManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "provenance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseProcessValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInventoryManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcessValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProvenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStock",
    data: BytesLike
  ): Result;

  events: {
    "ReleaseProcessValue(address,uint256,uint256)": EventFragment;
    "SetInventoryManagement(address)": EventFragment;
    "SetProcessValue(address,uint256,uint256)": EventFragment;
    "SetProvenance(address)": EventFragment;
    "UpdatedStock(uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReleaseProcessValue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInventoryManagement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProcessValue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProvenance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedStock"): EventFragment;
}

export interface ReleaseProcessValueEventObject {
  actor: string;
  nonce: BigNumber;
  value: BigNumber;
}
export type ReleaseProcessValueEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReleaseProcessValueEventObject
>;

export type ReleaseProcessValueEventFilter =
  TypedEventFilter<ReleaseProcessValueEvent>;

export interface SetInventoryManagementEventObject {
  inventoryManagement: string;
}
export type SetInventoryManagementEvent = TypedEvent<
  [string],
  SetInventoryManagementEventObject
>;

export type SetInventoryManagementEventFilter =
  TypedEventFilter<SetInventoryManagementEvent>;

export interface SetProcessValueEventObject {
  actor: string;
  nonce: BigNumber;
  value: BigNumber;
}
export type SetProcessValueEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetProcessValueEventObject
>;

export type SetProcessValueEventFilter = TypedEventFilter<SetProcessValueEvent>;

export interface SetProvenanceEventObject {
  provenance: string;
}
export type SetProvenanceEvent = TypedEvent<[string], SetProvenanceEventObject>;

export type SetProvenanceEventFilter = TypedEventFilter<SetProvenanceEvent>;

export interface UpdatedStockEventObject {
  itemId: BigNumber;
  quantity: BigNumber;
  movementType: number;
}
export type UpdatedStockEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  UpdatedStockEventObject
>;

export type UpdatedStockEventFilter = TypedEventFilter<UpdatedStockEvent>;

export interface AutomatedProcess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AutomatedProcessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    inventoryManagement(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processValues(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    provenance(overrides?: CallOverrides): Promise<[string]>;

    releaseProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInventoryManagement(
      _inventoryManagement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProvenance(
      _provenance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  inventoryManagement(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processValues(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  provenance(overrides?: CallOverrides): Promise<string>;

  releaseProcessValue(
    _nonce: PromiseOrValue<BigNumberish>,
    _actor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInventoryManagement(
    _inventoryManagement: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProcessValue(
    _nonce: PromiseOrValue<BigNumberish>,
    _actor: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProvenance(
    _provenance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStock(
    _itemId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _movementType: PromiseOrValue<BigNumberish>,
    _location: PromiseOrValue<string>,
    _note: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    inventoryManagement(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processValues(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provenance(overrides?: CallOverrides): Promise<string>;

    releaseProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInventoryManagement(
      _inventoryManagement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setProvenance(
      _provenance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReleaseProcessValue(address,uint256,uint256)"(
      actor?: null,
      nonce?: null,
      value?: null
    ): ReleaseProcessValueEventFilter;
    ReleaseProcessValue(
      actor?: null,
      nonce?: null,
      value?: null
    ): ReleaseProcessValueEventFilter;

    "SetInventoryManagement(address)"(
      inventoryManagement?: null
    ): SetInventoryManagementEventFilter;
    SetInventoryManagement(
      inventoryManagement?: null
    ): SetInventoryManagementEventFilter;

    "SetProcessValue(address,uint256,uint256)"(
      actor?: null,
      nonce?: null,
      value?: null
    ): SetProcessValueEventFilter;
    SetProcessValue(
      actor?: null,
      nonce?: null,
      value?: null
    ): SetProcessValueEventFilter;

    "SetProvenance(address)"(provenance?: null): SetProvenanceEventFilter;
    SetProvenance(provenance?: null): SetProvenanceEventFilter;

    "UpdatedStock(uint256,uint256,uint8)"(
      itemId?: null,
      quantity?: null,
      movementType?: null
    ): UpdatedStockEventFilter;
    UpdatedStock(
      itemId?: null,
      quantity?: null,
      movementType?: null
    ): UpdatedStockEventFilter;
  };

  estimateGas: {
    inventoryManagement(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processValues(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provenance(overrides?: CallOverrides): Promise<BigNumber>;

    releaseProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInventoryManagement(
      _inventoryManagement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProvenance(
      _provenance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    inventoryManagement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processValues(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provenance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInventoryManagement(
      _inventoryManagement: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProcessValue(
      _nonce: PromiseOrValue<BigNumberish>,
      _actor: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProvenance(
      _provenance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
