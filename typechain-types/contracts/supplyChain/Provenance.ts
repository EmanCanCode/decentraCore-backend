/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Provenance {
  export type ProductRecordStruct = {
    productName: PromiseOrValue<string>;
    variety: PromiseOrValue<string>;
    productType: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    location: PromiseOrValue<BytesLike>;
    state: PromiseOrValue<BigNumberish>;
    additionalInfo: PromiseOrValue<BytesLike>;
  };

  export type ProductRecordStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    number,
    string
  ] & {
    productName: string;
    variety: string;
    productType: string;
    timestamp: BigNumber;
    location: string;
    state: number;
    additionalInfo: string;
  };
}

export interface ProvenanceInterface extends utils.Interface {
  functions: {
    "automatedProcess()": FunctionFragment;
    "createRecord(string,string,string,uint256,string,uint8,string)": FunctionFragment;
    "decodeProductId(bytes)": FunctionFragment;
    "getHistory(bytes)": FunctionFragment;
    "isCompleted(bytes)": FunctionFragment;
    "nonce(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "productHistory(bytes,uint256)": FunctionFragment;
    "reentrancyGuard()": FunctionFragment;
    "setAutomatedProcess(address)": FunctionFragment;
    "updateRecord(bytes,uint256,string,uint8,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "automatedProcess"
      | "createRecord"
      | "decodeProductId"
      | "getHistory"
      | "isCompleted"
      | "nonce"
      | "owner"
      | "productHistory"
      | "reentrancyGuard"
      | "setAutomatedProcess"
      | "updateRecord"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "automatedProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRecord",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeProductId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCompleted",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "productHistory",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reentrancyGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedProcess",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "automatedProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeProductId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reentrancyGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecord",
    data: BytesLike
  ): Result;

  events: {
    "CreatedRecord(string,string,string,uint256,string,uint8,string,address,uint256,uint256,bytes)": EventFragment;
    "SetAutomatedProcess(address)": EventFragment;
    "UpdatedRecord(bytes,uint256,string,uint8,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAutomatedProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRecord"): EventFragment;
}

export interface CreatedRecordEventObject {
  productName: string;
  variety: string;
  productType: string;
  timestamp: BigNumber;
  location: string;
  state: number;
  additionalInfo: string;
  recordCreator: string;
  value: BigNumber;
  nonce: BigNumber;
  productId: string;
}
export type CreatedRecordEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    string,
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  CreatedRecordEventObject
>;

export type CreatedRecordEventFilter = TypedEventFilter<CreatedRecordEvent>;

export interface SetAutomatedProcessEventObject {
  automatedProcess: string;
}
export type SetAutomatedProcessEvent = TypedEvent<
  [string],
  SetAutomatedProcessEventObject
>;

export type SetAutomatedProcessEventFilter =
  TypedEventFilter<SetAutomatedProcessEvent>;

export interface UpdatedRecordEventObject {
  productId: string;
  timestamp: BigNumber;
  location: string;
  state: number;
  additionalInfo: string;
  recordUpdater: string;
}
export type UpdatedRecordEvent = TypedEvent<
  [string, BigNumber, string, number, string, string],
  UpdatedRecordEventObject
>;

export type UpdatedRecordEventFilter = TypedEventFilter<UpdatedRecordEvent>;

export interface Provenance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProvenanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    automatedProcess(overrides?: CallOverrides): Promise<[string]>;

    createRecord(
      _productName: PromiseOrValue<string>,
      _variety: PromiseOrValue<string>,
      _productType: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decodeProductId(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { creator: string; nonceValue: number }>;

    getHistory(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Provenance.ProductRecordStructOutput[]]>;

    isCompleted(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    productHistory(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, number, string] & {
        productName: string;
        variety: string;
        productType: string;
        timestamp: BigNumber;
        location: string;
        state: number;
        additionalInfo: string;
      }
    >;

    reentrancyGuard(overrides?: CallOverrides): Promise<[boolean]>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRecord(
      _productId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  automatedProcess(overrides?: CallOverrides): Promise<string>;

  createRecord(
    _productName: PromiseOrValue<string>,
    _variety: PromiseOrValue<string>,
    _productType: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _location: PromiseOrValue<string>,
    _state: PromiseOrValue<BigNumberish>,
    _additionalInfo: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decodeProductId(
    productId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { creator: string; nonceValue: number }>;

  getHistory(
    _productId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Provenance.ProductRecordStructOutput[]>;

  isCompleted(
    _productId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  productHistory(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, number, string] & {
      productName: string;
      variety: string;
      productType: string;
      timestamp: BigNumber;
      location: string;
      state: number;
      additionalInfo: string;
    }
  >;

  reentrancyGuard(overrides?: CallOverrides): Promise<boolean>;

  setAutomatedProcess(
    _automatedProcess: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRecord(
    _productId: PromiseOrValue<BytesLike>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _location: PromiseOrValue<string>,
    _state: PromiseOrValue<BigNumberish>,
    _additionalInfo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    automatedProcess(overrides?: CallOverrides): Promise<string>;

    createRecord(
      _productName: PromiseOrValue<string>,
      _variety: PromiseOrValue<string>,
      _productType: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decodeProductId(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { creator: string; nonceValue: number }>;

    getHistory(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Provenance.ProductRecordStructOutput[]>;

    isCompleted(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    productHistory(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, number, string] & {
        productName: string;
        variety: string;
        productType: string;
        timestamp: BigNumber;
        location: string;
        state: number;
        additionalInfo: string;
      }
    >;

    reentrancyGuard(overrides?: CallOverrides): Promise<boolean>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRecord(
      _productId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreatedRecord(string,string,string,uint256,string,uint8,string,address,uint256,uint256,bytes)"(
      productName?: null,
      variety?: null,
      productType?: null,
      timestamp?: null,
      location?: null,
      state?: null,
      additionalInfo?: null,
      recordCreator?: null,
      value?: null,
      nonce?: null,
      productId?: null
    ): CreatedRecordEventFilter;
    CreatedRecord(
      productName?: null,
      variety?: null,
      productType?: null,
      timestamp?: null,
      location?: null,
      state?: null,
      additionalInfo?: null,
      recordCreator?: null,
      value?: null,
      nonce?: null,
      productId?: null
    ): CreatedRecordEventFilter;

    "SetAutomatedProcess(address)"(
      automatedProcess?: null
    ): SetAutomatedProcessEventFilter;
    SetAutomatedProcess(
      automatedProcess?: null
    ): SetAutomatedProcessEventFilter;

    "UpdatedRecord(bytes,uint256,string,uint8,string,address)"(
      productId?: null,
      timestamp?: null,
      location?: null,
      state?: null,
      additionalInfo?: null,
      recordUpdater?: null
    ): UpdatedRecordEventFilter;
    UpdatedRecord(
      productId?: null,
      timestamp?: null,
      location?: null,
      state?: null,
      additionalInfo?: null,
      recordUpdater?: null
    ): UpdatedRecordEventFilter;
  };

  estimateGas: {
    automatedProcess(overrides?: CallOverrides): Promise<BigNumber>;

    createRecord(
      _productName: PromiseOrValue<string>,
      _variety: PromiseOrValue<string>,
      _productType: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decodeProductId(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHistory(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCompleted(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    productHistory(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reentrancyGuard(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRecord(
      _productId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    automatedProcess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createRecord(
      _productName: PromiseOrValue<string>,
      _variety: PromiseOrValue<string>,
      _productType: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decodeProductId(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHistory(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCompleted(
      _productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    productHistory(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reentrancyGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRecord(
      _productId: PromiseOrValue<BytesLike>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      _additionalInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
