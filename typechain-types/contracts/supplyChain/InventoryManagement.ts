/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace InventoryManagement {
  export type InventoryTransactionStruct = {
    quantity: PromiseOrValue<BigNumberish>;
    movementType: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    location: PromiseOrValue<string>;
    note: PromiseOrValue<string>;
    user: PromiseOrValue<string>;
  };

  export type InventoryTransactionStructOutput = [
    BigNumber,
    number,
    BigNumber,
    string,
    string,
    string
  ] & {
    quantity: BigNumber;
    movementType: number;
    timestamp: BigNumber;
    location: string;
    note: string;
    user: string;
  };
}

export interface InventoryManagementInterface extends utils.Interface {
  functions: {
    "automatedProcess()": FunctionFragment;
    "deleteItem(uint256)": FunctionFragment;
    "getTransactionHistory(uint256)": FunctionFragment;
    "isBelowThreshold(uint256)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "nextItemId()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerItem(string,string,uint256)": FunctionFragment;
    "setAutomatedProcess(address)": FunctionFragment;
    "setReorderThreshold(uint256,uint256)": FunctionFragment;
    "transactions(uint256,uint256)": FunctionFragment;
    "transferItem(uint256,uint256,string,string,string)": FunctionFragment;
    "updateStock(uint256,uint256,uint8,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "automatedProcess"
      | "deleteItem"
      | "getTransactionHistory"
      | "isBelowThreshold"
      | "items"
      | "nextItemId"
      | "owner"
      | "registerItem"
      | "setAutomatedProcess"
      | "setReorderThreshold"
      | "transactions"
      | "transferItem"
      | "updateStock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "automatedProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHistory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBelowThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "items",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextItemId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedProcess",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReorderThreshold",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferItem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "automatedProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBelowThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextItemId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReorderThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStock",
    data: BytesLike
  ): Result;

  events: {
    "ItemDeleted(uint256)": EventFragment;
    "ItemRegistered(uint256,string,string,uint256)": EventFragment;
    "ItemTransferred(uint256,uint256,string,string,uint256,string)": EventFragment;
    "SetAutomatedProcess(address)": EventFragment;
    "SetReorderThreshold(uint256,uint256)": EventFragment;
    "StockUpdated(uint256,uint256,uint8,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAutomatedProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReorderThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StockUpdated"): EventFragment;
}

export interface ItemDeletedEventObject {
  itemId: BigNumber;
}
export type ItemDeletedEvent = TypedEvent<[BigNumber], ItemDeletedEventObject>;

export type ItemDeletedEventFilter = TypedEventFilter<ItemDeletedEvent>;

export interface ItemRegisteredEventObject {
  itemId: BigNumber;
  name: string;
  description: string;
  reorderThreshold: BigNumber;
}
export type ItemRegisteredEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  ItemRegisteredEventObject
>;

export type ItemRegisteredEventFilter = TypedEventFilter<ItemRegisteredEvent>;

export interface ItemTransferredEventObject {
  itemId: BigNumber;
  quantity: BigNumber;
  fromLocation: string;
  toLocation: string;
  timestamp: BigNumber;
  note: string;
}
export type ItemTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber, string],
  ItemTransferredEventObject
>;

export type ItemTransferredEventFilter = TypedEventFilter<ItemTransferredEvent>;

export interface SetAutomatedProcessEventObject {
  automatedProcess: string;
}
export type SetAutomatedProcessEvent = TypedEvent<
  [string],
  SetAutomatedProcessEventObject
>;

export type SetAutomatedProcessEventFilter =
  TypedEventFilter<SetAutomatedProcessEvent>;

export interface SetReorderThresholdEventObject {
  itemId: BigNumber;
  threshold: BigNumber;
}
export type SetReorderThresholdEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetReorderThresholdEventObject
>;

export type SetReorderThresholdEventFilter =
  TypedEventFilter<SetReorderThresholdEvent>;

export interface StockUpdatedEventObject {
  itemId: BigNumber;
  newQuantity: BigNumber;
  movementType: number;
  timestamp: BigNumber;
  note: string;
}
export type StockUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, number, BigNumber, string],
  StockUpdatedEventObject
>;

export type StockUpdatedEventFilter = TypedEventFilter<StockUpdatedEvent>;

export interface InventoryManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InventoryManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    automatedProcess(overrides?: CallOverrides): Promise<[string]>;

    deleteItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTransactionHistory(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[InventoryManagement.InventoryTransactionStructOutput[]]>;

    isBelowThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        name: string;
        description: string;
        quantity: BigNumber;
        reorderThreshold: BigNumber;
      }
    >;

    nextItemId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerItem(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _reorderThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReorderThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string, string] & {
        quantity: BigNumber;
        movementType: number;
        timestamp: BigNumber;
        location: string;
        note: string;
        user: string;
      }
    >;

    transferItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _fromLocation: PromiseOrValue<string>,
      _toLocation: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  automatedProcess(overrides?: CallOverrides): Promise<string>;

  deleteItem(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTransactionHistory(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<InventoryManagement.InventoryTransactionStructOutput[]>;

  isBelowThreshold(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  items(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      name: string;
      description: string;
      quantity: BigNumber;
      reorderThreshold: BigNumber;
    }
  >;

  nextItemId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerItem(
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _reorderThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutomatedProcess(
    _automatedProcess: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReorderThreshold(
    _itemId: PromiseOrValue<BigNumberish>,
    _threshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string, string, string] & {
      quantity: BigNumber;
      movementType: number;
      timestamp: BigNumber;
      location: string;
      note: string;
      user: string;
    }
  >;

  transferItem(
    _itemId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _fromLocation: PromiseOrValue<string>,
    _toLocation: PromiseOrValue<string>,
    _note: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStock(
    _itemId: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    _movementType: PromiseOrValue<BigNumberish>,
    _location: PromiseOrValue<string>,
    _note: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    automatedProcess(overrides?: CallOverrides): Promise<string>;

    deleteItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTransactionHistory(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<InventoryManagement.InventoryTransactionStructOutput[]>;

    isBelowThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        name: string;
        description: string;
        quantity: BigNumber;
        reorderThreshold: BigNumber;
      }
    >;

    nextItemId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerItem(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _reorderThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReorderThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string, string] & {
        quantity: BigNumber;
        movementType: number;
        timestamp: BigNumber;
        location: string;
        note: string;
        user: string;
      }
    >;

    transferItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _fromLocation: PromiseOrValue<string>,
      _toLocation: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemDeleted(uint256)"(
      itemId?: PromiseOrValue<BigNumberish> | null
    ): ItemDeletedEventFilter;
    ItemDeleted(
      itemId?: PromiseOrValue<BigNumberish> | null
    ): ItemDeletedEventFilter;

    "ItemRegistered(uint256,string,string,uint256)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      description?: null,
      reorderThreshold?: null
    ): ItemRegisteredEventFilter;
    ItemRegistered(
      itemId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      description?: null,
      reorderThreshold?: null
    ): ItemRegisteredEventFilter;

    "ItemTransferred(uint256,uint256,string,string,uint256,string)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      quantity?: null,
      fromLocation?: null,
      toLocation?: null,
      timestamp?: null,
      note?: null
    ): ItemTransferredEventFilter;
    ItemTransferred(
      itemId?: PromiseOrValue<BigNumberish> | null,
      quantity?: null,
      fromLocation?: null,
      toLocation?: null,
      timestamp?: null,
      note?: null
    ): ItemTransferredEventFilter;

    "SetAutomatedProcess(address)"(
      automatedProcess?: null
    ): SetAutomatedProcessEventFilter;
    SetAutomatedProcess(
      automatedProcess?: null
    ): SetAutomatedProcessEventFilter;

    "SetReorderThreshold(uint256,uint256)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      threshold?: null
    ): SetReorderThresholdEventFilter;
    SetReorderThreshold(
      itemId?: PromiseOrValue<BigNumberish> | null,
      threshold?: null
    ): SetReorderThresholdEventFilter;

    "StockUpdated(uint256,uint256,uint8,uint256,string)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      newQuantity?: null,
      movementType?: null,
      timestamp?: null,
      note?: null
    ): StockUpdatedEventFilter;
    StockUpdated(
      itemId?: PromiseOrValue<BigNumberish> | null,
      newQuantity?: null,
      movementType?: null,
      timestamp?: null,
      note?: null
    ): StockUpdatedEventFilter;
  };

  estimateGas: {
    automatedProcess(overrides?: CallOverrides): Promise<BigNumber>;

    deleteItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTransactionHistory(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBelowThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextItemId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerItem(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _reorderThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReorderThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _fromLocation: PromiseOrValue<string>,
      _toLocation: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    automatedProcess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTransactionHistory(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBelowThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextItemId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerItem(
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _reorderThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutomatedProcess(
      _automatedProcess: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReorderThreshold(
      _itemId: PromiseOrValue<BigNumberish>,
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _fromLocation: PromiseOrValue<string>,
      _toLocation: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStock(
      _itemId: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      _movementType: PromiseOrValue<BigNumberish>,
      _location: PromiseOrValue<string>,
      _note: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
