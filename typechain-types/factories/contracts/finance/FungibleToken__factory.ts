/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FungibleToken,
  FungibleTokenInterface,
} from "../../../contracts/finance/FungibleToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000cdb38038062000cdb8339810160408190526200003491620002bd565b82826003620000448382620003c1565b506004620000538282620003c1565b5050600580546001600160a01b031916339081179091556200007791508262000080565b505050620004b5565b6001600160a01b038216620000b05760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000be60008383620000c2565b5050565b6001600160a01b038316620000f1578060026000828254620000e591906200048d565b90915550620001659050565b6001600160a01b03831660009081526020819052604090205481811015620001465760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000a7565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200018357600280548290039055620001a2565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001e891815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021d57600080fd5b81516001600160401b03808211156200023a576200023a620001f5565b604051601f8301601f19908116603f01168101908282118183101715620002655762000265620001f5565b81604052838152602092508660208588010111156200028357600080fd5b600091505b83821015620002a7578582018301518183018401529082019062000288565b6000602085830101528094505050505092915050565b600080600060608486031215620002d357600080fd5b83516001600160401b0380821115620002eb57600080fd5b620002f9878388016200020b565b945060208601519150808211156200031057600080fd5b506200031f868287016200020b565b925050604084015190509250925092565b600181811c908216806200034557607f821691505b6020821081036200036657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003bc576000816000526020600020601f850160051c81016020861015620003975750805b601f850160051c820191505b81811015620003b857828155600101620003a3565b5050505b505050565b81516001600160401b03811115620003dd57620003dd620001f5565b620003f581620003ee845462000330565b846200036c565b602080601f8311600181146200042d5760008415620004145750858301515b600019600386901b1c1916600185901b178555620003b8565b600085815260208120601f198616915b828110156200045e578886015182559484019460019091019084016200043d565b50858210156200047d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620004af57634e487b7160e01b600052601160045260246000fd5b92915050565b61081680620004c56000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806340c10f191161007157806340c10f191461012357806370a08231146101385780638da5cb5b1461016157806395d89b411461018c578063a9059cbb14610194578063dd62ed3e146101a757600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101e0565b6040516100c3919061065f565b60405180910390f35b6100df6100da3660046106ca565b610272565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046106f4565b61028c565b604051601281526020016100c3565b6101366101313660046106ca565b6102b0565b005b6100f3610146366004610730565b6001600160a01b031660009081526020819052604090205490565b600554610174906001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b6100b661031d565b6100df6101a23660046106ca565b61032c565b6100f36101b5366004610752565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101ef90610785565b80601f016020809104026020016040519081016040528092919081815260200182805461021b90610785565b80156102685780601f1061023d57610100808354040283529160200191610268565b820191906000526020600020905b81548152906001019060200180831161024b57829003601f168201915b5050505050905090565b60003361028081858561033a565b60019150505b92915050565b60003361029a85828561034c565b6102a58585856103cb565b506001949350505050565b6005546001600160a01b0316331461030f5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920746865206f776e65722063616e206d696e7420746f6b656e73000060448201526064015b60405180910390fd5b610319828261042a565b5050565b6060600480546101ef90610785565b6000336102808185856103cb565b6103478383836001610460565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156103c557818110156103b657604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610306565b6103c584848484036000610460565b50505050565b6001600160a01b0383166103f557604051634b637e8f60e11b815260006004820152602401610306565b6001600160a01b03821661041f5760405163ec442f0560e01b815260006004820152602401610306565b610347838383610535565b6001600160a01b0382166104545760405163ec442f0560e01b815260006004820152602401610306565b61031960008383610535565b6001600160a01b03841661048a5760405163e602df0560e01b815260006004820152602401610306565b6001600160a01b0383166104b457604051634a1406b160e11b815260006004820152602401610306565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156103c557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161052791815260200190565b60405180910390a350505050565b6001600160a01b03831661056057806002600082825461055591906107bf565b909155506105d29050565b6001600160a01b038316600090815260208190526040902054818110156105b35760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610306565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166105ee5760028054829003905561060d565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161065291815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b8181101561068d57858101830151858201604001528201610671565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146106c557600080fd5b919050565b600080604083850312156106dd57600080fd5b6106e6836106ae565b946020939093013593505050565b60008060006060848603121561070957600080fd5b610712846106ae565b9250610720602085016106ae565b9150604084013590509250925092565b60006020828403121561074257600080fd5b61074b826106ae565b9392505050565b6000806040838503121561076557600080fd5b61076e836106ae565b915061077c602084016106ae565b90509250929050565b600181811c9082168061079957607f821691505b6020821081036107b957634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028657634e487b7160e01b600052601160045260246000fdfea2646970667358221220fe96c9234feaedab27d202e04707f969678e5c79a3f09eae3b8756da9787231d64736f6c63430008180033";

type FungibleTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FungibleTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FungibleToken__factory extends ContractFactory {
  constructor(...args: FungibleTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FungibleToken> {
    return super.deploy(
      _name,
      _symbol,
      _initialSupply,
      overrides || {}
    ) as Promise<FungibleToken>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): FungibleToken {
    return super.attach(address) as FungibleToken;
  }
  override connect(signer: Signer): FungibleToken__factory {
    return super.connect(signer) as FungibleToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FungibleTokenInterface {
    return new utils.Interface(_abi) as FungibleTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FungibleToken {
    return new Contract(address, _abi, signerOrProvider) as FungibleToken;
  }
}
