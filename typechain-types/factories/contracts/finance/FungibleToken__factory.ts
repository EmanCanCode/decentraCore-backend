/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FungibleToken,
  FungibleTokenInterface,
} from "../../../contracts/finance/FungibleToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e6638038062000e66833981016040819052620000349162000235565b8282600362000044838262000338565b50600462000053828262000338565b5050600580546001600160a01b031916339081179091556200007791508262000080565b5050506200042c565b6001600160a01b038216620000db5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000ef919062000404565b90915550506001600160a01b038216600090815260208190526040812080548392906200011e90849062000404565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200019557600080fd5b81516001600160401b0380821115620001b257620001b26200016d565b604051601f8301601f19908116603f01168101908282118183101715620001dd57620001dd6200016d565b8160405283815260209250866020858801011115620001fb57600080fd5b600091505b838210156200021f578582018301518183018401529082019062000200565b6000602085830101528094505050505092915050565b6000806000606084860312156200024b57600080fd5b83516001600160401b03808211156200026357600080fd5b620002718783880162000183565b945060208601519150808211156200028857600080fd5b50620002978682870162000183565b925050604084015190509250925092565b600181811c90821680620002bd57607f821691505b602082108103620002de57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000168576000816000526020600020601f850160051c810160208610156200030f5750805b601f850160051c820191505b8181101562000330578281556001016200031b565b505050505050565b81516001600160401b038111156200035457620003546200016d565b6200036c81620003658454620002a8565b84620002e4565b602080601f831160018114620003a457600084156200038b5750858301515b600019600386901b1c1916600185901b17855562000330565b600085815260208120601f198616915b82811015620003d557888601518255948401946001909101908401620003b4565b5085821015620003f45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200042657634e487b7160e01b600052601160045260246000fd5b92915050565b610a2a806200043c6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c57806395d89b411161006657806395d89b41146101c5578063a457c2d7146101cd578063a9059cbb146101e0578063dd62ed3e146101f357600080fd5b806340c10f191461015c57806370a08231146101715780638da5cb5b1461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc610206565b6040516100e99190610873565b60405180910390f35b6101056101003660046108de565b610298565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610908565b6102b2565b604051601281526020016100e9565b6101056101573660046108de565b6102d6565b61016f61016a3660046108de565b6102f8565b005b61011961017f366004610944565b6001600160a01b031660009081526020819052604090205490565b6005546101ad906001600160a01b031681565b6040516001600160a01b0390911681526020016100e9565b6100dc610365565b6101056101db3660046108de565b610374565b6101056101ee3660046108de565b6103ef565b610119610201366004610966565b6103fd565b60606003805461021590610999565b80601f016020809104026020016040519081016040528092919081815260200182805461024190610999565b801561028e5780601f106102635761010080835404028352916020019161028e565b820191906000526020600020905b81548152906001019060200180831161027157829003601f168201915b5050505050905090565b6000336102a6818585610428565b60019150505b92915050565b6000336102c085828561054c565b6102cb8585856105c6565b506001949350505050565b6000336102a68185856102e983836103fd565b6102f391906109d3565b610428565b6005546001600160a01b031633146103575760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920746865206f776e65722063616e206d696e7420746f6b656e73000060448201526064015b60405180910390fd5b6103618282610794565b5050565b60606004805461021590610999565b6000338161038282866103fd565b9050838110156103e25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034e565b6102cb8286868403610428565b6000336102a68185856105c6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661048a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034e565b6001600160a01b0382166104eb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034e565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061055884846103fd565b905060001981146105c057818110156105b35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161034e565b6105c08484848403610428565b50505050565b6001600160a01b03831661062a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034e565b6001600160a01b03821661068c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034e565b6001600160a01b038316600090815260208190526040902054818110156107045760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034e565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061073b9084906109d3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161078791815260200190565b60405180910390a36105c0565b6001600160a01b0382166107ea5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161034e565b80600260008282546107fc91906109d3565b90915550506001600160a01b038216600090815260208190526040812080548392906108299084906109d3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60006020808352835180602085015260005b818110156108a157858101830151858201604001528201610885565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146108d957600080fd5b919050565b600080604083850312156108f157600080fd5b6108fa836108c2565b946020939093013593505050565b60008060006060848603121561091d57600080fd5b610926846108c2565b9250610934602085016108c2565b9150604084013590509250925092565b60006020828403121561095657600080fd5b61095f826108c2565b9392505050565b6000806040838503121561097957600080fd5b610982836108c2565b9150610990602084016108c2565b90509250929050565b600181811c908216806109ad57607f821691505b6020821081036109cd57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102ac57634e487b7160e01b600052601160045260246000fdfea2646970667358221220b56a2e42656fd9e900f7b05e29004656672b24d38481b63d17085421ac47cb8b64736f6c63430008180033";

type FungibleTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FungibleTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FungibleToken__factory extends ContractFactory {
  constructor(...args: FungibleTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FungibleToken> {
    return super.deploy(
      _name,
      _symbol,
      _initialSupply,
      overrides || {}
    ) as Promise<FungibleToken>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): FungibleToken {
    return super.attach(address) as FungibleToken;
  }
  override connect(signer: Signer): FungibleToken__factory {
    return super.connect(signer) as FungibleToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FungibleTokenInterface {
    return new utils.Interface(_abi) as FungibleTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FungibleToken {
    return new Contract(address, _abi, signerOrProvider) as FungibleToken;
  }
}
